##################### Grafana Configuration #####################
#
# {{ ansible_managed }}
#

# possible values : production, development
app_mode = {{ grafana_app_mode }}

#################################### Paths ###############################
[paths]
# Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
#
data = {{ grafana_data_path }}
#
# Directory where grafana can store logs
#
logs = {{ grafana_log_path }}
#
# Directory where grafana will automatically scan and look for plugins
#
plugins = {{ grafana_plugins_path }}

#################################### Server ##############################
[server]
# Protocol (http or https)
protocol = http

# The ip address to bind to, empty will bind to all interfaces
http_addr =

# The http port  to use
http_port = {{ grafana_port }}

# The public facing domain name used to access grafana from a browser
domain = {{ ansible_domain }}

# Redirect to correct domain if host header does not match domain
# Prevents DNS rebinding attacks
enforce_domain = false

# The full public facing url
root_url = %(protocol)s://%(domain)s:%(http_port)s/{{ grafana_sub_path }}

# Serve from subpath
serve_from_sub_path = {{ grafana_serve_from_sub_path }}

# Log web requests
router_logging = false

# the path relative working path
static_root_path = public

# enable gzip
enable_gzip = false

# https certs & key file
cert_file =
cert_key =

[database]
# Either "mysql", "postgres" or "sqlite3", it's your choice
type = {{ grafana_database_type}}
host = {{ grafana_database_host }}:{{ grafana_database_port }}
name = {{ grafana_database_database }}
user = {{ grafana_database_user }}
# If the password contains # or ; you have to wrap it with trippel quotes. Ex """#password;"""
password = {{ grafana_database_password }}

# Use either URL or the previous fields to configure the database
# Example: mysql://user:secret@host:port/database
url =

# Max conn setting default is 0 (mean not set)
max_conn =
max_idle_conn =
max_open_conn =

# For "postgres", use either "disable", "require" or "verify-full"
# For "mysql", use either "true", "false", or "skip-verify".
ssl_mode = {{ grafana_database_ssl_mode }}

ca_cert_path =
client_key_path =
client_cert_path =
server_cert_name =

# For "sqlite3" only, path relative to data_path setting
path = grafana.db

#################################### Session #############################
[session]
# Either "memory", "file", "redis", "mysql", "postgres", "memcache", default is "file"
provider = file

# Provider config options
# memory: not have any config yet
# file: session dir path, is relative to grafana data_path
# redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=grafana`
# postgres: user=a password=b host=localhost port=5432 dbname=c sslmode=disable
# mysql: go-sql-driver/mysql dsn config string, examples:
#         `user:password@tcp(127.0.0.1:3306)/database_name`
#         `user:password@unix(/var/run/mysqld/mysqld.sock)/database_name`
# memcache: 127.0.0.1:11211

provider_config = sessions
cookie_name = grafana_sess

# If you use session in https only, default is false
cookie_secure = false

# Session life time, default is 86400
session_life_time = 86400
gc_interval_time = 86400

#################################### Analytics ###########################
[analytics]
# Server reporting, sends usage counters to stats.grafana.org every 24 hours.
# No ip addresses are being tracked, only simple counters to track
# running instances, dashboard and error counts. It is very helpful to us.
# Change this option to false to disable reporting.
reporting_enabled = true

# Set to false to disable all checks to https://grafana.net
# for new vesions (grafana itself and plugins), check is used
# in some UI views to notify that grafana or plugin update exists
# This option does not cause any auto updates, nor send any information
# only a GET request to http://grafana.net to get latest versions
check_for_updates = true

# Google Analytics universal tracking code, only enabled if you specify an id here
google_analytics_ua_id =

# Google Tag Manager ID, only enabled if you specify an id here
google_tag_manager_id =

#################################### Security ############################
[security]
admin_user = {{ grafana_admin_user }}
admin_password = {{ grafana_admin_password }}

# Auto-login remember days
login_remember_days = 7
cookie_username = grafana_user
cookie_remember_name = grafana_remember

# disable gravatar profile images
disable_gravatar = false

# data source proxy whitelist (ip_or_domain:port separated by spaces)
data_source_proxy_whitelist =

[snapshots]
# snapshot sharing options
external_enabled = true
external_snapshot_url = https://snapshots-origin.raintank.io
external_snapshot_name = Publish to snapshot.raintank.io

# remove expired snapshot
snapshot_remove_expired = true

# remove snapshots after 90 days
snapshot_TTL_days = 90

#################################### Users ####################################
[users]
# disable user signup / registration
allow_sign_up = {{ grafana_users_allow_signup }}

# Allow non admin users to create organizations
allow_org_create = true

# Set to true to automatically assign new users to the default organization (id 1)
auto_assign_org = true

# Default role new users will be automatically assigned (if auto_assign_org above is set to true)
auto_assign_org_role = Viewer

# Require email validation before sign up completes
verify_email_enabled = false

# Background text for the user field on the login page
login_hint = email or username

# Default UI theme ("dark" or "light")
default_theme = dark

[auth]
# Set to true to disable (hide) the login form, useful if you use OAuth
disable_login_form = false

#################################### Basic Auth ##########################
[auth.basic]
enabled = true

#################################### Auth LDAP ###########################
[auth.ldap]
enabled = {{ grafana_ldap_authentication }}
config_file = /etc/grafana/ldap.toml
allow_sign_up = true

#################################### Logging ##########################
[log]
# Either "console", "file", "syslog". Default is console and  file
# Use space to separate multiple modes, e.g. "console file"
mode = {{ grafana_log_mode }}

# Either "debug", "info", "warn", "error", "critical", default is "info"
level = {{ grafana_log_level }}

# optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
filters =

# For "console" mode only
[log.console]
level =

# log line format, valid options are text, console and json
format = console

# For "file" mode only
[log.file]
level =

# log line format, valid options are text, console and json
format = text

# This enables automated log rotate(switch of following options), default is true
log_rotate = true

# Max line number of single file, default is 1000000
max_lines = 1000000

# Max size shift of single file, default is 28 means 1 << 28, 256MB
max_size_shift = 28

# Segment log daily, default is true
daily_rotate = true

# Expired days of log file(delete after max days), default is 7
max_days = 7

[log.syslog]
level =

# log line format, valid options are text, console and json
format = text

# Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
network =
address =

# Syslog facility. user, daemon and local0 through local7 are valid.
facility =

# Syslog tag. By default, the process' argv[0] is used.
tag =


#################################### AMQP Event Publisher ################
[event_publisher]
enabled = false
rabbitmq_url = amqp://localhost/
exchange = grafana_events

#################################### Dashboard JSON files ################
[dashboards.json]
enabled = false
path = {{ grafana_dashboards_path }}

#################################### Usage Quotas ########################
[quota]
enabled = false

#### set quotas to -1 to make unlimited. ####
# limit number of users per Org.
org_user = 10

# limit number of dashboards per Org.
org_dashboard = 100

# limit number of data_sources per Org.
org_data_source = 10

# limit number of api_keys per Org.
org_api_key = 10

# limit number of orgs a user can create.
user_org = 10

# Global limit of users.
global_user = -1

# global limit of orgs.
global_org = -1

# global limit of dashboards
global_dashboard = -1

# global limit of api_keys
global_api_key = -1

# global limit on number of logged in users.
global_session = -1

#################################### Alerting ############################
[alerting]
# Disable alerting engine & UI features
enabled = true
# Makes it possible to turn off alert rule execution but alerting UI is visible
execute_alerts = true

#################################### Internal Grafana Metrics ############
# Metrics available at HTTP API Url /api/metrics
[metrics]
enabled           = true
interval_seconds  = 10

# Send internal Grafana metrics to graphite
[metrics.graphite]
# Enable by setting the address setting (ex localhost:2003)
address =
prefix = prod.grafana.%(instance_name)s.

[grafana_net]
url = https://grafana.net

#################################### External Image Storage ##############
[external_image_storage]
# You can choose between (s3, webdav)
provider =

[external_image_storage.s3]
bucket_url =
access_key =
secret_key =

[external_image_storage.webdav]
url =
username =
password =

#################################### Plugins ###########################
[plugins]
enable_alpha = {{ grafana_plugins_enable_alpha }}
allow_loading_unsigned_plugins = {{ grafana_plugins_allow_loading_unsigned_plugins }}
plugin_admin_enabled = {{ grafana_plugins_admin_enabled }}
plugin_admin_external_manage_enabled = {{ grafana_plugins_admin_external_manage_enabled }}
plugin_catalog_url = {{ grafana_plugins_plugin_catalog }}
